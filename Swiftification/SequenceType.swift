//
// Copyright (c) 2015 Hilton Campbell
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

import Foundation

public extension SequenceType {
    
    /// Returns an array of elements generated by transforming each element of `self`
    /// with `transform` and discarding any `nil` values.
    @warn_unused_result
    func mapFilter<T>(@noescape transform: Generator.Element throws -> T?) rethrows -> [T] {
        var results = [T]()
        for element in self {
            if let result = try transform(element) {
                results.append(result)
            }
        }
        return results
    }
    
    /// Returns the first element of `self` that tests `true`, or `nil` if no element tests `true`.
    @warn_unused_result
    func takeFirst(@noescape test: Generator.Element throws -> Bool) rethrows -> Generator.Element? {
        for element in self where try test(element) {
            return element
        }
        return nil
    }
    
}
